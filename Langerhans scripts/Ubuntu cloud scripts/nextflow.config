
executor {
  name = "local"
  queueSize = 8
}

process {
  executor = 'local'
}
  
params {
  max_memory = 62.GB
  max_cpus = 8
  max_time = 240.h
}

process {
    withName: 'NFCORE_RNASEQ:RNASEQ:DEDUP_UMI_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
        cpus = 8
        memory = '55.GB'
        time = '16.h'
        ext.args = ' --temp-dir= /dev/vdbl/data/main_storage/umi-temp'
    }

    withName: 'NFCORE_RNASEQ:RNASEQ:DEDUP_UMI_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
        cpus = 8
        memory = '55.GB'
        time = '16.h'
	ext.args = '--temp-dir= /dev/vdbl/data_main_storage/umi-temp'
    }
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
